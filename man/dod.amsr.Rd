% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/amsr.R
\name{dod.amsr}
\alias{dod.amsr}
\title{Download Advanced Microwave Scanning Radiometer data}
\usage{
dod.amsr(
  year = NULL,
  month,
  day,
  destdir = ".",
  server = "https://data.remss.com/amsr2/ocean/L3/v08.2",
  type = "3day",
  debug = 0
)
}
\arguments{
\item{year, month, day}{integer values indicating the desired observation time.
Set \code{year} to NULL (the default) to default to the most recent data; otherwise
specify all three of these values if \code{type} is \code{"3day"}, \code{"daily"} or \code{"weekly"},
or just the first two of them if \code{type} is \code{"monthly"}.  If these
things are provided, then they just match exactly the values in the sought-after
file on the remote server.  If \code{year} is NULL, then \code{\link[=dod.amsr]{dod.amsr()}} constructs
a URL that ought to be the most recent available file: 3 days prior
to the present date (if \code{type} is \code{"3day"} or \code{"daily"}), the Saturday
two weeks prior to the present date (if \code{type} is \code{"weekly"}), or
two months in the past (if \code{type} is \code{"monthly"}).}

\item{destdir}{character giving destination directory (defaults to \code{"."}, the present
directory).  The directory must exist.  (The author uses \code{"~/data/amsr"}.)}

\item{server}{character value indicating the base server location. The
default value ought to be used unless the data provider changes their
web scheme ... but in that case, it is hoped that users will contact
the developers so that the package can be updated.}

\item{type}{character value indicating where to get the data.  This may be
\code{"3day"} (the default), for a composite covering 3 days of observation, which
removes most viewing-path and cloud blanks, \code{"daily"} for a daily reading,
\code{"weekly"} for a composite covering a week, or \code{"monthly"} for a composite
covering a month.  In the \code{"daily"} case, the data arrays are 3D, with the
third dimension representing ascending and descending traces, but in all the
other cases, the arrays are 2D.}

\item{debug}{integer giving debugging level (defaults to 0, to make the function work
without much output).}
}
\value{
\code{dod.amsr} returns a character value holding the full pathname
of the downloaded file.
}
\description{
This function downloads AMSR data.
}
\details{
This works by constructing URLs based on the arguments provided.  The author
is unaware of any documentation that specifies the directory structure on
the server, and so the construction is based on examining the server
with a web browser.  Obviously, this is a fragile approach that will
lead to failed downloads if the remote directory structure changes.  Indeed,
\code{\link[=dod.amsr]{dod.amsr()}} was completely rewritten in July 2023, because a previous version
was seen to fail on that date.  Users are asked to report any failed downloads
they encounter.  Careful inspection of the documentation for \code{year}, \code{month}
and \code{day} is, of course, the first step in debugging errors.
}
\section{Historical note}{

Until July 2023, \code{\link[=dod.amsr]{dod.amsr()}} worked by calling \code{\link[oce:download.amsr]{oce::download.amsr()}}.
However, at that time, the author noticed changes in both
the directory structure of the remote server, and the format of the
data files. The new directory structure was addressed by a complete
rewrite of the code within \code{dod}, and a severing of the connection
to \code{\link[oce:download.amsr]{oce::download.amsr()}}.  The new file format cannot be addressed
within the present package, and will require changes to
\code{oce::read.amsr()}, building upon the method that is shown in the
\sQuote{Examples} section of the present documentation.
}

\examples{
# This example is not run because it downloads a 12Mb file.
\dontrun{
if (dir.exists("~/data/amsr")) {
    library(dod)
    library(oce)
    library(ncdf4)
    file <- dod.amsr(destdir="~/data/amsr")
    nc <- nc_open(file)
    lon <- ncvar_get(nc, "lon")
    lat <- ncvar_get(nc, "lat")
    SST <- ncvar_get(nc, "SST")
    U <- ncvar_get(nc, "wind_speed_AW")
    par(mfrow=c(2, 1))
    imagep(lon, lat, SST, asp=1, col=oceColorsTurbo, xaxs="i")
    mtext("SST [degC]")
    imagep(lon, lat, U, asp=1, zlim=c(0,15), col=oceColorsTurbo, xaxs="i")
    mtext("Wind [m/s]")
    nc_close(nc)
}
}

}
\author{
Dan Kelley
}
